-- Módulo de autenticação
-- Cadastro de admin
INSERT INTO `usuario`(`nome_usuario`, `senha`) VALUES ('admin', MD5('admin'));

-- Cadastro de usuários
INSERT INTO `usuario`(`nome_usuario`, `senha`)
VALUES (?, MD5(?));

-- Autenticação de usuário
SELECT `id_usuario`, `nome_usuario` FROM `usuario`
WHERE `nome_usuario` = ? AND `senha` = MD5(?);



-- Módulo de turmas
-- Visualizar todas as turmas em que um usuário participa
SELECT t.id_turma, t.nome, t.descricao, t.publico
FROM `Turma` t INNER JOIN  `Participacao` p ON t.id_turma = p.turma_id
WHERE p.usuario_id = ?;

-- Cadastrar turma
INSERT INTO `turma`(`nome`, `descricao`, `publico`)
VALUES (?, ?, 1);

-- Cadastrar usuário em uma turma (professor)
INSERT INTO `participacao`(`usuario_id`, `turma_id`, `professor`)
VALUES (?, ?, 1);

-- Cadastrar usuário em uma turma (estudante)
INSERT INTO `participacao`(`usuario_id`, `turma_id`, `professor`)
VALUES (?, ?, 0);

-- Remover uma turma



-- Módulo de atividades
-- Cadastrar atividade (Professor)
INSERT INTO `Atividade`(`nome`, `descricao`, `usuario_id`, `data_entrega`, `status`)
VALUES (?, ?, ?, ?, ?);
INSERT INTO `Atividade_Publicacao`(`usuario_id`, `turma_id`, `atividade_id`)
VALUES (?, ?, ?);

-- Visualizar todas as atividades recentes de uma turma
SELECT DISTINCT a.id_atividade, a.nome, a.data_entrega, a.status
FROM `Atividade_Participacao` ap
INNER JOIN `Atividade` a ON ap.atividade_id = a.id_atividade
WHERE a.data_entrega >= SYSDATE()
AND a.data_entrega <= DATE_ADD(SYSDATE(), INTERVAL 7 DAY)
AND ap.turma_id = ?;

(Estudante)
-- Visualizar as notas de atividades em uma turma em que o aluno
participa que foram corrigidas recentemente
SELECT a.id_atividade, a.nome, a.descricao, a.data_entrega, a.status, ap.nota
FROM `Atividade_Participacao` ap
INNER JOIN `Atividade` a ON ap.atividade_id = a.id_atividade
WHERE ap.usuario_id = ? AND ap.turma_id = ?
AND status = 'terminado'
AND SYSDATE() <= DATE_ADD(a.data_entrega, INTERVAL 7 DAY);

(Estudante)
-- Visualizar as últimas atividades contando todas as turmas em que um usuário participa
SELECT a.id_atividade, a.nome, a.descricao, a.data_entrega, a.status, ap.nota
FROM `Atividade_Participacao` ap
INNER JOIN `Atividade` a ON ap.atividade_id = a.id_atividade
WHERE ap.usuario_id = ?
AND status = 'terminado'
AND SYSDATE() <= DATE_ADD(a.data_entrega, INTERVAL 7 DAY);

(Professor)
-- Visualizar atividades com data de correção próxima
SELECT a.id_atividade, a.nome, a.descricao, a.data_entrega, a.status, ap.nota
FROM `Atividade_Participacao` ap
INNER JOIN `Atividade` a ON ap.atividade_id = a.id_atividade
WHERE ap.usuario_id = ? AND ap.turma_id = ?
AND status = 'terminado'
AND SYSDATE() <= DATE_ADD(a.data_entrega, INTERVAL 7 DAY);



-- Fórum de dúvidas
-- Publicar dúvida
INSERT INTO `publicacao`(`titulo`, `conteudo`, `usuario_id`, `turma_id`, `data_publicacao`)
VALUES (?, ?, ?, ?, SYSDATE());

-- Responder dúvida
INSERT INTO `publicacao`(`titulo`, `conteudo`, `usuario_id`, `turma_id`, `publicacao_id`,  `data_publicacao`)
VALUES (?, ?, ?, ?, ?, SYSDATE());

-- Visualizar todas as dúvidas em um fórum

-- Visualizar todas as dúvidas publicadas por um estudante em um fórum
SELECT p.id_publicacao, p.titulo, p.conteudo
, p.data_publicacao, p.data_edicao
FROM Publicacao p
WHERE p.publicacao_id IS NULL
AND p.usuario_id = ? AND p.turma_id = ?;

-- Editar uma publicação
UPDATE `Publicacao`
SET `titulo` = ?
, `conteudo` = ?
, `usuario_id` = ?
, `turma_id` = ?
, `publicacao_id` = ?
, `data_publicacao` = ?
, `data_edicao` = ?
WHERE `id_publicacao` = ?;

-- Visualizar as últimas dúvidas publicadas em uma turma

(Professor)
-- Visualizar as dúvidas recentes dos alunos
SELECT *
FROM `Publicacao` pu
INNER JOIN `Participacao` pa
ON pu.usuario_id = pa.usuario_id
AND pu.turma_id = pa.turma_id
WHERE pu.publicacao_id IS NULL
AND pa.professor = 1; (TESTE)

-- Visualizar turmas em que o usuário é ativo (posta mais)
SELECT t.id_turma, t.nome, t.descricao, t.publico
FROM `Turma` t INNER JOIN (SELECT p.turma_id, COUNT(p.id_publicacao) qtd_posts
FROM `Publicacao` p
WHERE p.usuario_id = 4
GROUP BY p.turma_id
ORDER BY qtd_posts DESC
LIMIT 10) tid
ON t.id_turma = tid.turma_id;

-- Mostrar todas as respostas de uma dúvida


-- Módulo de interação
-- Visualizar todas as turmas públicas
SELECT t.id_turma, t.nome, t.descricao, t.publico
FROM `Turma` t
WHERE t.publico = 1;

